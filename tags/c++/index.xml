<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c&#43;&#43; on wanglun</title>
    <link>https://blog.wanglun.org/tags/c&#43;&#43;/</link>
    <description>Recent content in c&#43;&#43; on wanglun</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 09 Jun 2019 17:40:00 +0800</lastBuildDate>
    
	<atom:link href="https://blog.wanglun.org/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数字的中文读法</title>
      <link>https://blog.wanglun.org/post/number-in-chinese/</link>
      <pubDate>Sun, 09 Jun 2019 17:40:00 +0800</pubDate>
      
      <guid>https://blog.wanglun.org/post/number-in-chinese/</guid>
      <description>题目 本次的编码练习题是“数字的中文读法”，需要完成数字与其中文读法之间的相互转换，例如：
 123 -&amp;gt; 一百二十三 200 -&amp;gt; 二百 201 -&amp;gt; 二百零一 2001 -&amp;gt; 二千零一 200000 -&amp;gt; 二十万 210000 -&amp;gt; 二十一万 210500 -&amp;gt; 二十一万零五百 123410500 -&amp;gt; 一亿二千三百四十一万零五百 2023400500 -&amp;gt; 二十亿二千三百四十万零五百 1002023400500 -&amp;gt; 一万零二十亿二千三百四十万零五百  动手实现 重点是分析中文读法的规律，尽量多写一些测试用例，以覆盖到不同的情况。示例代码如下：
#include &amp;lt;string&amp;gt; #include &amp;lt;unordered_map&amp;gt; #include &amp;lt;cassert&amp;gt; // 可以处理最长13位的数字 std::string say_number_in_chinese_v1(long num) { // 单位映射 static const std::string units_map[] = {&amp;quot;&amp;quot;, &amp;quot;十&amp;quot;, &amp;quot;百&amp;quot;, &amp;quot;千&amp;quot;, &amp;quot;万&amp;quot;, &amp;quot;十&amp;quot;, &amp;quot;百&amp;quot;, &amp;quot;千&amp;quot;, &amp;quot;亿&amp;quot;, &amp;quot;十&amp;quot;, &amp;quot;百&amp;quot;, &amp;quot;千&amp;quot;, &amp;quot;万&amp;quot;}; // 数字映射 static const std::string digits_map[] = {&amp;quot;零&amp;quot;, &amp;quot;一&amp;quot;, &amp;quot;二&amp;quot;, &amp;quot;三&amp;quot;, &amp;quot;四&amp;quot;, &amp;quot;五&amp;quot;, &amp;quot;六&amp;quot;, &amp;quot;七&amp;quot;, &amp;quot;八&amp;quot;, &amp;quot;九&amp;quot;}; // 0直接返回 if (num == 0) { return digits_map[0]; } std::string ret; // 检测连续的0 bool zero_flag = false; int i = 0; while (num) { int digit = num % 10; if (digit) { ret = units_map[i] + ret; ret = digits_map[digit] + ret; zero_flag = false; } else { if (i % 4 == 0) { ret = units_map[i] + ret; } else if (!</description>
    </item>
    
    <item>
      <title>阻塞队列(Blocking Queue)</title>
      <link>https://blog.wanglun.org/post/minilib-blocking-queue/</link>
      <pubDate>Sat, 27 Apr 2019 16:00:33 +0800</pubDate>
      
      <guid>https://blog.wanglun.org/post/minilib-blocking-queue/</guid>
      <description>简介  Blocking Queue是基于管程(Monitors)实现的一种多线程编程中常用的数据结构 Blocking Queue可以方便地实现线程间的资源分发，用于任务队列、生产者-消费者问题。  应用场景  任务队列 生产者-消费者问题  动手实现 在minilib中，使用queue作为基础队列，使用mutex和condition_variable进行线程同步，实现的固定容量的阻塞队列如下：
#ifndef MINILIB_BLOCKING_QUEUE_H #define MINILIB_BLOCKING_QUEUE_H #include &amp;lt;condition_variable&amp;gt; #include &amp;lt;mutex&amp;gt; #include &amp;lt;queue&amp;gt; namespace minilib { // blocking_queue是一个固定大小的阻塞队列， // push时，如果已满，则使用条件变量阻塞等待 // pop时，如果已空，则使用条件变量阻塞等待 template &amp;lt;typename T&amp;gt; class blocking_queue { public: typedef T type; explicit blocking_queue(size_t size) : size_(size) {} ~blocking_queue() {} void pop(type&amp;amp; v) { // 需要使用unique_lock，因为在wait时先会原子的unlock，若满足条件则重新lock std::unique_lock&amp;lt;std::mutex&amp;gt; lk(cv_m_); while (queue_.empty()) { cv_.wait(lk); } v = std::move(queue_.front()); queue_.pop(); cv_.notify_one(); } void push(const type&amp;amp; v) { std::unique_lock&amp;lt;std::mutex&amp;gt; lk(cv_m_); while (queue_.</description>
    </item>
    
  </channel>
</rss>