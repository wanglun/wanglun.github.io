<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>coding on wanglun</title><link>https://wanglun.org/categories/coding/</link><description>Recent content in coding on wanglun</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 02 Jul 2019 13:40:00 +0800</lastBuildDate><atom:link href="https://wanglun.org/categories/coding/index.xml" rel="self" type="application/rss+xml"/><item><title>最长会议间隔时间</title><link>https://wanglun.org/post/rearrange-meetings-longest-break-duration/</link><pubDate>Tue, 02 Jul 2019 13:40:00 +0800</pubDate><guid>https://wanglun.org/post/rearrange-meetings-longest-break-duration/</guid><description>题目 本次的编码练习题是“最长会议间隔时间”，参考自https://stackoverflow.com/questions/52135344
题目简述如下：
有一场会议，从0点开始，t点结束。 安排n个演讲者进行演讲，每个演讲者开始时间用数组start表示（共n个元素）， 结束时间用finish数组表示（共n个元素），演讲者的演讲顺序不能变。 现在可以调整最多k个演讲者的演讲时间，找出经过调整后，可以得到的最长会议间隔时间。 case 0 input: n=3 k=2 t=15 start=[0, 6, 7] finish=[5, 7, 8] output: 8 case 1 input: n=1 k=0 t=1000000000 start=[607641287] finish=[607641288] output: 607641287 case 2 input: n=4 k=2 t=15 start=[4, 6, 7, 10] finish=[5, 7, 8, 11] output: 6 动手实现 这道题目可以使用滑动窗口来实现，步骤如下：
找到所有会议间的间隔时长数组slots，对于连续的会议，则间隔时长为0 对于给定的k，使用大小为k+1的窗口，在上述slots数组中滑动，并计算窗口内间隔时长之和 上述窗口中，间隔时长之和最大值，即为最长会议间隔 调整方法是，将窗口中的k个会议连接在一起，并安排在窗口的一侧即可 以case 0举例如下：
slots = [0, 1, 0, 7] k=2, 则滑动窗口大小为3，得到两个窗口，分别为[0, 1, 0]和[1, 0, 7] 第二个窗口的和最大，即最大会议间隔为8 /* You are organizing an event where there will be a number of presenters.</description></item><item><title>数字的中文读法</title><link>https://wanglun.org/post/number-in-chinese/</link><pubDate>Sun, 09 Jun 2019 17:40:00 +0800</pubDate><guid>https://wanglun.org/post/number-in-chinese/</guid><description>题目 本次的编码练习题是“数字的中文读法”，需要完成数字与其中文读法之间的相互转换，例如：
123 -&amp;gt; 一百二十三 200 -&amp;gt; 二百 201 -&amp;gt; 二百零一 2001 -&amp;gt; 二千零一 200000 -&amp;gt; 二十万 210000 -&amp;gt; 二十一万 210500 -&amp;gt; 二十一万零五百 123410500 -&amp;gt; 一亿二千三百四十一万零五百 2023400500 -&amp;gt; 二十亿二千三百四十万零五百 1002023400500 -&amp;gt; 一万零二十亿二千三百四十万零五百 动手实现 重点是分析中文读法的规律，尽量多写一些测试用例，以覆盖到不同的情况。示例代码如下：
#include &amp;lt;string&amp;gt;#include &amp;lt;unordered_map&amp;gt;#include &amp;lt;cassert&amp;gt; // 可以处理最长13位的数字 std::string say_number_in_chinese_v1(long num) { // 单位映射 static const std::string units_map[] = {&amp;#34;&amp;#34;, &amp;#34;十&amp;#34;, &amp;#34;百&amp;#34;, &amp;#34;千&amp;#34;, &amp;#34;万&amp;#34;, &amp;#34;十&amp;#34;, &amp;#34;百&amp;#34;, &amp;#34;千&amp;#34;, &amp;#34;亿&amp;#34;, &amp;#34;十&amp;#34;, &amp;#34;百&amp;#34;, &amp;#34;千&amp;#34;, &amp;#34;万&amp;#34;}; // 数字映射 static const std::string digits_map[] = {&amp;#34;零&amp;#34;, &amp;#34;一&amp;#34;, &amp;#34;二&amp;#34;, &amp;#34;三&amp;#34;, &amp;#34;四&amp;#34;, &amp;#34;五&amp;#34;, &amp;#34;六&amp;#34;, &amp;#34;七&amp;#34;, &amp;#34;八&amp;#34;, &amp;#34;九&amp;#34;}; // 0直接返回 if (num == 0) { return digits_map[0]; } std::string ret; // 检测连续的0 bool zero_flag = false; int i = 0; while (num) { int digit = num % 10; if (digit) { ret = units_map[i] + ret; ret = digits_map[digit] + ret; zero_flag = false; } else { if (i % 4 == 0) { ret = units_map[i] + ret; } else if (!</description></item></channel></rss>